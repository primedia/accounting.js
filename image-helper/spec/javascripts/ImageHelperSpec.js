// Generated by CoffeeScript 1.6.3
(function() {
  describe("ImageHelper", function() {
    var imageHelper;
    imageHelper = null;
    beforeEach(function() {
      var ready;
      ready = false;
      require(['../../image-helper', 'jasmine-jquery'], function(_imageHelper) {
        imageHelper = _imageHelper;
        loadFixtures("image-helper.html");
        return ready = true;
      });
      return waitsFor(function() {
        return ready;
      });
    });
    describe("#pickImageServer", function() {
      return it("rotates servers", function() {
        expect(imageHelper.pickImageServer()).toBe(1);
        return expect(imageHelper.pickImageServer()).toBe("");
      });
    });
    describe("#assetURL", function() {
      return it("pulls content from the meta tag", function() {
        return expect(imageHelper.assetURL()).toBe("http://local.apartmentguide.com");
      });
    });
    describe("#notFoundURL", function() {
      beforeEach(function() {});
      return it("builts it with the host", function() {
        return expect(imageHelper.notFoundURL()).toBe("http://local.apartmentguide.com/images/prop_no_photo_results.png");
      });
    });
    describe("#isInvalidURL", function() {
      it("is not when a string", function() {
        return expect(imageHelper.isInvalidURL("foo.png")).toBeFalsy();
      });
      it("is when undefined", function() {
        return expect(imageHelper.isInvalidURL()).toBeTruthy();
      });
      return it("is when undefined", function() {
        return expect(imageHelper.isInvalidURL("")).toBeTruthy();
      });
    });
    return describe("#url", function() {
      it("appends width and height to a single url", function() {
        return expect(imageHelper.url("foo", 10, 20)).toBe("http://image1.apartmentguide.com/foo/10-20");
      });
      it("appends width to a url", function() {
        return expect(imageHelper.url("foo", 10)).toBe("http://image.apartmentguide.com/foo/10-");
      });
      it("appends height to a url", function() {
        return expect(imageHelper.url("foo", null, 20)).toBe("http://image1.apartmentguide.com/foo/-20");
      });
      it("accepts an array of objects and uses the first", function() {
        var examples;
        examples = [
          {
            path: "foo"
          }, {
            path: "bar"
          }
        ];
        return expect(imageHelper.url(examples, 10, 20)).toBe("http://image.apartmentguide.com/foo/10-20");
      });
      it("appends width and height to a url with query params", function() {
        return expect(imageHelper.url("foo?a=b", 10, 20)).toBe("http://image1.apartmentguide.com/foo/10-20?a=b");
      });
      it("does not require width or height", function() {
        return expect(imageHelper.url("foo")).toBe("http://image.apartmentguide.com/foo/");
      });
      return it("returns a not found when image is invalid", function() {
        return expect(imageHelper.url("")).toBe(imageHelper.notFoundURL());
      });
    });
  });

}).call(this);
