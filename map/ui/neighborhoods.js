// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  define(['underscore', 'flight/lib/component', 'lib/fusiontip/fusiontip', 'lib/accounting/accounting', 'map/utils/mobile_detection'], function(_, defineComponent, fusionTip, accounting, mobileDetection) {
    var neighborhoodsOverlay;
    neighborhoodsOverlay = function() {
      this.defaultAttrs({
        enableOnboardCalls: false,
        enableMouseover: false,
        tableId: void 0,
        apiKey: void 0,
        hoodLayer: void 0,
        gMap: void 0,
        toggleLink: void 0,
        toggleControl: void 0,
        data: void 0,
        infoTemplate: void 0,
        tipStyle: '',
        mouseTipDelay: 200,
        suppressMapTips: false,
        minimalZommLevel: 12,
        polyOptions: {
          clicked: {
            strokeColor: "#000",
            strokeOpacity: .5,
            strokeWeight: 1,
            fillColor: "#000",
            fillOpacity: .2
          },
          mouseover: {
            strokeColor: "#000",
            strokeOpacity: .5,
            strokeWeight: 1,
            fillColor: "#000",
            fillOpacity: .2
          },
          mouseout: {
            strokeWeight: 0,
            fillOpacity: 0
          }
        },
        polygonOptions: {
          fillColor: "BC8F8F",
          fillOpacity: 0.1,
          strokeColor: "4D4D4D",
          strokeOpacity: 0.8,
          strokeWeight: 1
        },
        polygonOptionsCurrent: {
          fillOpacity: 0.5,
          strokeColor: '4D4D4D',
          strokeOpacity: 0.7,
          strokeWeight: 2
        },
        infoWindowData: {
          state: void 0,
          hood: void 0,
          population: void 0,
          growth: void 0,
          density: void 0,
          males: void 0,
          females: void 0,
          median_income: void 0,
          average_income: void 0
        }
      });
      this.infoWindow = new google.maps.InfoWindow();
      this.hoodQuery = function(data) {
        var where;
        where = "WHERE LATITUDE >= " + data.lat1 + " AND LATITUDE <= " + data.lat2 + " AND LONGITUDE >= " + data.lng1 + " AND LONGITUDE <= " + data.lng2;
        return "SELECT geometry, HOOD_NAME, STATENAME, MARKET FROM " + this.attr.tableId + " " + where;
      };
      this.addHoodsLayer = function(ev, data) {
        if (!data || !data.gMap || data.gMap.getZoom() < this.attr.minimalZommLevel) {
          return;
        }
        this.attr.gMap = data.gMap;
        this.attr.data = data;
        this.getPolygonData(data);
        return this.setupMouseOver();
      };
      this.setupMouseOver = function() {
        if (!this.isMobile() && this.attr.enableMouseover) {
          return this.buildMouseOverWindow();
        }
      };
      this.setupLayer = function(data) {
        return this.getPolygonData(data);
      };
      this.getPolygonData = function(data) {
        var url,
          _this = this;
        url = ["https://www.googleapis.com/fusiontables/v1/query?sql="];
        url.push(encodeURIComponent(this.hoodQuery(data)));
        url.push("&key=" + this.attr.apiKey);
        return $.ajax({
          url: url.join(""),
          dataType: "jsonp",
          success: function(data) {
            return _this.buildPolygons(data);
          }
        });
      };
      this.buildPolygons = function(data) {
        var hoodLayer, i, mouseOutOptions, mouseOverOptions, row, rows, _results;
        rows = data.rows;
        _results = [];
        for (i in rows) {
          if (!rows[i][0]) {
            continue;
          }
          row = this.parseRow(rows[i]);
          mouseOverOptions = this.attr.polyOptions.mouseover;
          mouseOutOptions = this.attr.polyOptions.mouseout;
          hoodLayer = new google.maps.Polygon(_.extend({
            paths: row.paths
          }, mouseOutOptions));
          google.maps.event.addListener(hoodLayer, "mouseover", function() {
            return this.setOptions(mouseOverOptions);
          });
          google.maps.event.addListener(hoodLayer, "mouseout", function() {
            return this.setOptions(mouseOutOptions);
          });
          _results.push(hoodLayer.setMap(this.attr.gMap));
        }
        return _results;
      };
      this.parseRow = function(row) {
        var hoodData;
        hoodData = this.parseHoodData(row);
        hoodData.paths = this.buildPaths(row);
        return hoodData;
      };
      this.buildPaths = function(row) {
        var coordinates, geometry;
        coordinates = [];
        if (geometry = row[0].geometry) {
          if (geometry.type === 'Polygon') {
            coordinates = this.makePathsCoordinates(geometry.coordinates[0]);
          }
        }
        return coordinates;
      };
      this.isValidPoint = function(arr) {
        return arr.length === 2 && _.all(arr, _.isNumber);
      };
      this.makePathsCoordinates = function(coordinates) {
        if (this.isValidPoint(coordinates)) {
          return new google.maps.LatLng(coordinates[1], coordinates[0]);
        } else {
          return _.map(coordinates, this.makePathsCoordinates, this);
        }
      };
      this.parseHoodData = function(row) {
        if (typeof row[0] === 'object') {
          return _.object(['hood', 'state', 'city'], row.slice(1));
        } else {
          return {};
        }
      };
      this.setupToggle = function() {
        this.positionToggleControl();
        return this.setupToggleAction();
      };
      this.setupToggleAction = function() {
        if (this.attr.toggleLink) {
          return this.on(this.attr.toggleLink, 'click', this.toggleLayer);
        }
      };
      this.positionToggleControl = function() {
        var control;
        if (this.attr.toggleControl) {
          control = $('<div/>');
          control.append($(this.attr.toggleControl));
          return this.attr.gMap.controls[google.maps.ControlPosition.TOP_RIGHT].push(control[0]);
        }
      };
      this.toggleLayer = function() {
        if (this.attr.hoodLayer.getMap()) {
          return this.attr.hoodLayer.setMap(null);
        } else {
          this.attr.hoodLayer.setMap(this.attr.gMap);
          return this.setupMouseOver();
        }
      };
      this.buildMouseOverWindow = function() {
        return this.attr.hoodLayer.enableMapTips({
          select: "HOOD_NAME",
          from: this.attr.tableId,
          geometryColumn: "geometry",
          suppressMapTips: this.attr.suppressMapTips,
          delay: this.attr.mouseTipDelay,
          tolerance: 8,
          key: this.attr.apiKey,
          style: this.attr.tipStyle
        });
      };
      this.addListeners = function() {
        var _this = this;
        if (this.attr.infoTemplate) {
          return google.maps.event.addListener(this.attr.hoodLayer, 'click', function(e) {
            return $(document).trigger('neighborhoodClicked', {
              row: e.row,
              location: e.latLng
            });
          });
        }
      };
      this.buildInfoWindow = function(event, data) {
        this.trigger(document, 'uiNHoodInfoWindowDataRequest');
        this.buildInfoData(event, data);
        event.infoWindowHtml = _.template(this.attr.infoTemplate, this.attr.infoWindowData);
        this.infoWindow.setContent(event.infoWindowHtml);
        this.infoWindow.setPosition(data.location);
        return this.infoWindow.open(this.attr.gMap);
      };
      this.buildInfoData = function(event, data) {
        var row;
        row = data.row;
        if (!_.isEmpty(row)) {
          this.attr.infoWindowData.state = row.STATENAME.value;
          this.attr.infoWindowData.hood = row.HOOD_NAME.value;
          return this.buildOnboardData(row);
        }
      };
      this.buildOnboardData = function(row) {
        var data, demographic, key, value, _ref, _results;
        if (!this.attr.enableOnboardCalls) {
          return;
        }
        data = JSON.parse(this.getOnboardData(row).responseText);
        if (!_.isEmpty(data)) {
          demographic = data.demographic;
          _ref = this.attr.infoWindowData;
          _results = [];
          for (key in _ref) {
            value = _ref[key];
            if (demographic[key]) {
              _results.push(this.attr.infoWindowData[key] = this.formatValue(key, demographic[key]));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      };
      this.formatValue = function(key, value) {
        switch (key) {
          case 'median_income':
          case 'average_income':
            return accounting.formatMoney(value);
          case 'population':
            return accounting.formatNumber(value);
          default:
            return value;
        }
      };
      this.getOnboardData = function(row) {
        var query, xhr;
        if (_.isEmpty(row)) {
          return {};
        }
        query = [];
        query.push("state=" + (this.toDashes(row.STATENAME.value)));
        query.push("city=" + (this.toDashes(row.MARKET.value)));
        query.push("neighborhood=" + (this.toDashes(row.HOOD_NAME.value)));
        return xhr = $.ajax({
          url: "/meta/community?rectype=NH&" + (query.join('&')),
          async: false
        }).done(function(data) {
          return data;
        }).fail(function(data) {
          return {};
        });
      };
      this.toDashes = function(value) {
        if (value == null) {
          return '';
        }
        return value.replace(' ', '-');
      };
      this.toSpaces = function(value) {
        if (value == null) {
          return '';
        }
        return value.replace('-', ' ');
      };
      return this.after('initialize', function() {
        this.on(document, 'uiNeighborhoodDataRequest', this.addHoodsLayer);
        this.on(document, 'neighborhoodClicked', this.buildInfoWindow);
      });
    };
    return defineComponent(neighborhoodsOverlay, mobileDetection);
  });

}).call(this);
