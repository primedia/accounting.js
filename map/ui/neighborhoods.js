// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  define(['underscore', 'flight/lib/component', 'lib/fusiontip/fusiontip', 'lib/accounting/accounting'], function(_, defineComponent, fusionTip, accounting) {
    var neighborhoodsOverlay;
    neighborhoodsOverlay = function() {
      this.defaultAttrs({
        enableOnboardCalls: false,
        enableMouseover: false,
        tableId: void 0,
        apiKey: void 0,
        hoodLayer: void 0,
        gMap: void 0,
        toggleLink: void 0,
        toggleControl: void 0,
        data: void 0,
        infoTemplate: void 0,
        tipStyle: {},
        polygonOptions: {
          fillColor: "fffaf0",
          fillOpacity: 0.1,
          strokeColor: "8b8378",
          strokeOpacity: 0.8,
          strokeWeight: 1
        },
        infoWindowData: {
          state: void 0,
          hood: void 0,
          population: void 0,
          growth: void 0,
          density: void 0,
          males: void 0,
          females: void 0,
          median_income: void 0,
          average_income: void 0
        }
      });
      this.hoodQuery = function(data) {
        var query, where;
        where = "LATITUDE >= " + data.lat1 + " AND LATITUDE <= " + data.lat2 + " AND LONGITUDE >= " + data.lng1 + " AND LONGITUDE <= " + data.lng2;
        return query = {
          select: "geometry",
          from: this.attr.tableId,
          where: where
        };
      };
      this.addHoodsLayer = function(ev, data) {
        if (!data || !data.gMap || data.gMap.getZoom() < 11) {
          return;
        }
        this.attr.gMap = data.gMap;
        this.attr.data = data;
        this.setupLayer(data);
        this.setupMouseOver(data);
        this.addListeners();
        this.setupToggle();
        return this.attr.hoodLayer.setMap(this.attr.gMap);
      };
      this.setupMouseOver = function(data) {
        if (this.attr.enableMouseover) {
          return this.buildMouseOverWindow();
        }
      };
      this.setupLayer = function(data) {
        var query;
        query = this.hoodQuery(data);
        if (this.attr.hoodLayer != null) {
          this.attr.hoodLayer.setMap(null);
          google.maps.event.clearInstanceListeners(this.attr.hoodLayer);
          this.attr.hoodLayer.setQuery(query);
        }
        return this.attr.hoodLayer = new google.maps.FusionTablesLayer({
          map: this.attr.gMap,
          query: query,
          styles: [
            {
              polygonOptions: this.attr.polygonOptions
            }
          ]
        });
      };
      this.setupToggle = function() {
        this.positionToggleControl();
        return this.setupToggleAction();
      };
      this.setupToggleAction = function() {
        if (this.attr.toggleLink) {
          return this.on(this.attr.toggleLink, 'click', this.toggleLayer);
        }
      };
      this.positionToggleControl = function() {
        var control;
        if (this.attr.toggleControl) {
          control = $('<div/>');
          control.append($(this.attr.toggleControl));
          return this.attr.gMap.controls[google.maps.ControlPosition.TOP_LEFT].push(control[0]);
        }
      };
      this.toggleLayer = function() {
        if (this.attr.hoodLayer.getMap()) {
          return this.attr.hoodLayer.setMap(null);
        } else {
          this.setupMouseOver(this.attr.data);
          this.addListeners();
          return this.attr.hoodLayer.setMap(this.attr.gMap);
        }
      };
      this.buildMouseOverWindow = function() {
        return this.attr.hoodLayer.enableMapTips({
          select: "HOOD_NAME, STATENAME",
          from: this.attr.tableId,
          geometryColumn: "geometry",
          suppressMapTips: false,
          delay: 200,
          tolerance: 8,
          key: this.attr.apiKey,
          style: this.attr.tipStyle
        });
      };
      this.addListeners = function() {
        var _this = this;
        if (this.attr.infoTemplate) {
          return google.maps.event.addListener(this.attr.hoodLayer, 'click', function(e) {
            return _this.buildInfoWindow(e);
          });
        }
      };
      this.buildInfoWindow = function(event) {
        this.buildInfoData(event);
        return event.infoWindowHtml = _.template(this.attr.infoTemplate, this.attr.infoWindowData);
      };
      this.buildInfoData = function(event) {
        var row;
        row = event.row;
        if (!_.isEmpty(row)) {
          this.attr.infoWindowData.state = row.HOOD_NAME.value;
          this.attr.infoWindowData.hood = row.STATENAME.value;
          return this.buildOnboardData(row);
        }
      };
      this.buildOnboardData = function(row) {
        var data, demographic, key, value, _ref, _results;
        if (!this.attr.enableOnboardCalls) {
          return;
        }
        data = JSON.parse(this.getOnboardData(row).responseText);
        if (!_.isEmpty(data)) {
          demographic = data.demographic;
          _ref = this.attr.infoWindowData;
          _results = [];
          for (key in _ref) {
            value = _ref[key];
            if (demographic[key]) {
              _results.push(this.attr.infoWindowData[key] = this.formatValue(key, demographic[key]));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      };
      this.formatValue = function(key, value) {
        switch (key) {
          case 'median_income':
          case 'average_income':
            return accounting.formatMoney(value);
          case 'population':
            return accounting.formatNumber(value);
          default:
            return value;
        }
      };
      this.getOnboardData = function(row) {
        var query, xhr;
        if (_.isEmpty(row)) {
          return {};
        }
        query = [];
        query.push("state=" + (this.toDashes(row.STATENAME.value)));
        query.push("city=" + (this.toDashes(row.MARKET.value)));
        query.push("neighborhood=" + (this.toDashes(row.HOOD_NAME.value)));
        return xhr = $.ajax({
          url: "/meta/community?rectype=NH&" + (query.join('&')),
          async: false
        }).done(function(data) {
          return data;
        }).fail(function(data) {
          return {};
        });
      };
      this.toDashes = function(value) {
        if (value == null) {
          return '';
        }
        return value.replace(' ', '-');
      };
      return this.after('initialize', function() {
        this.on(document, 'uiNeighborhoodDataRequest', this.addHoodsLayer);
      });
    };
    return defineComponent(neighborhoodsOverlay);
  });

}).call(this);
