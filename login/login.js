// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty;

  define(["jquery", "jquery-cookie-rjs", "jquery-prmdialog"], function($, cookie, prmDialog) {
    var bindRegistrationLinks, bindSocialLink, clearErrors, enableLoginRegistration, expireCookie, formatError, generateErrors, init, logOut, my, redirectOnSuccess, redirectTo, submitChangeEmail, submitEmailRegistration, submitLogin, toggleLogIn, toggleRegistrationDiv, triggerModal, welcomeMessage, wireupSocialLinks;
    my = {
      zid: $.cookie('zid'),
      session: ($.cookie("sgn") === "temp") || ($.cookie("sgn") === "perm"),
      currentUrl: window.location.href,
      registrationForm: $("#zutron_register_form"),
      popupTypes: ["login", "register", "change"]
    };
    bindRegistrationLinks = function(type) {
      var modalDiv;
      modalDiv = $("#zutron_" + type + "_form");
      return $("a." + type).click(function() {
        $('.prm_dialog').prm_dialog_close();
        return triggerModal(modalDiv);
      });
    };
    wireupSocialLinks = function(div) {
      var baseUrl, fbLink, googleLink, twitterLink;
      baseUrl = zutron_host + "?zid_id=" + my.zid + "&referrer=" + my.currentUrl + "&technique=";
      fbLink = div.find("a.icon_facebook48");
      twitterLink = div.find("a.icon_twitter48");
      googleLink = div.find("a.icon_google_plus48");
      bindSocialLink(fbLink, baseUrl + "facebook");
      bindSocialLink(twitterLink, baseUrl + "twitter");
      return bindSocialLink(googleLink, baseUrl + "google_oauth2");
    };
    enableLoginRegistration = function() {
      $('#registaration_form form').submit(function() {
        return submitEmailRegistration($(this));
      });
      $('#zutron_change_form form').submit(function() {
        return submitChangeEmail($(this));
      });
      return $('#zutron_login_form form').submit(function() {
        return submitLogin($(this));
      });
    };
    redirectOnSuccess = function(obj) {
      my.registrationForm.prm_dialog_close();
      if (obj.redirectUrl) {
        return window.location.assign(obj.redirectUrl);
      }
    };
    submitEmailRegistration = function(form) {
      form.find("input#state").val(my.zid);
      form.find("input#origin").val(window.location.href);
      return $.ajax({
        type: 'POST',
        data: form.serialize(),
        url: "" + zutron_host + "/auth/identity/register",
        beforeSend: function(xhr) {
          xhr.overrideMimeType("text/json");
          return xhr.setRequestHeader("Accept", "application/json");
        },
        success: function(data) {
          if (data['redirectUrl']) {
            return redirectOnSuccess(data);
          } else {
            return generateErrors(data, form.parent().find(".errors"));
          }
        },
        error: function(errors) {
          return generateErrors($.parseJSON(errors.responseText), form.parent().find(".errors"));
        }
      });
    };
    submitLogin = function(form) {
      form.find("input#state").val(my.zid);
      form.find("input#origin").val(window.location.href);
      return $.ajax({
        type: "POST",
        data: form.serialize(),
        url: "" + zutron_host + "/auth/identity/callback",
        beforeSend: function(xhr) {
          xhr.overrideMimeType("text/json");
          return xhr.setRequestHeader("Accept", "application/json");
        },
        success: function(data) {
          if (data['redirectUrl']) {
            return redirectOnSuccess(data);
          } else {
            return generateErrors(data, form.parent().find(".errors"));
          }
        },
        error: function(errors) {
          return generateErrors($.parseJSON(errors.responseText), form.parent().find(".errors"));
        }
      });
    };
    submitChangeEmail = function(form) {
      var new_email;
      form.find("input#state").val(my.zid);
      form.find("input#origin").val(window.location.href);
      new_email = {
        profile: {
          email: $('input[name="profile"]').val()
        }
      };
      return $.ajax({
        type: "GET",
        data: new_email,
        datatype: 'json',
        url: zutron_host + "/zids/" + my.zid + "/profile/edit.json",
        beforeSend: function(xhr) {
          xhr.overrideMimeType("text/json");
          return xhr.setRequestHeader("Accept", "application/json");
        },
        success: function(data) {
          var error;
          error = null;
          if ((data != null) && data.base) {
            error = {
              'email': data.base
            };
            return generateErrors(error, form.parent().find(".errors"));
          } else {
            return $('#zutron_change_form').prm_dialog_close();
          }
        },
        error: function(errors) {
          return generateErrors($.parseJSON(errors.responseText), form.parent().find(".errors"));
        }
      });
    };
    clearErrors = function(div) {
      div.find('.errors').empty();
      return div.find('form p').removeClass('error');
    };
    formatError = function(key, value) {
      switch (key) {
        case "base":
          return value;
        case "auth_key":
          if (value) {
            return value;
          } else {
            return '';
          }
          break;
        case "email":
          if (value) {
            return "Email " + value;
          } else {
            return '';
          }
          break;
        case "password":
          if (value) {
            return "Password " + value;
          } else {
            return '';
          }
          break;
        case "password_confirmation":
          return "Password Confirmation " + value;
      }
    };
    generateErrors = function(error, box) {
      var form, formattedError, key, messages, value;
      clearErrors(box.parent());
      messages = '';
      if (error != null) {
        form = box.parent().find('form');
        for (key in error) {
          if (!__hasProp.call(error, key)) continue;
          value = error[key];
          form.find("#" + key).parent('p').addClass('error');
          formattedError = formatError(key, value);
          if (formatError) {
            messages += "<li>" + formattedError + "</li>";
          }
        }
        form.find('.error input:first').focus();
      } else {
        messages += "An error has occured.";
      }
      return box.append("<ul>" + messages + "</ul>");
    };
    triggerModal = function(div) {
      clearErrors(div);
      div.prm_dialog_open();
      wireupSocialLinks(div);
      return div.on("click", "a.close", function() {
        return div.prm_dialog_close();
      });
    };
    toggleRegistrationDiv = function(div) {
      var type, _i, _len, _ref, _results;
      if (!my.session) {
        div.show();
        wireupSocialLinks(div);
        _ref = my.popupTypes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          type = _ref[_i];
          _results.push(bindRegistrationLinks(type));
        }
        return _results;
      }
    };
    redirectTo = function(url) {
      return $.ajax({
        type: "get",
        url: zutron_host + "/ops/heartbeat/riak",
        success: function() {
          return window.location.assign(url);
        },
        error: function() {
          my.registrationForm.prm_dialog_close();
          $("#zutron_login_form").prm_dialog_close();
          return triggerModal($("#zutron_error"));
        }
      });
    };
    bindSocialLink = function(link, url) {
      return link.on("click", function() {
        var options, staySignedIn;
        staySignedIn = $(".zutron_login_popup :checkbox")[0].checked || $(".zutron_register_popup :checkbox")[0].checked;
        if (staySignedIn) {
          options = {
            path: "/",
            domain: window.location.host
          };
          $.cookie("stay", "true", options);
        } else {
          expireCookie("sgn");
        }
        return redirectTo(url);
      });
    };
    toggleLogIn = function() {
      var changeLink, logLink, regLink;
      regLink = $("#login_links li a.register");
      logLink = $("#login_links li a.login");
      changeLink = $('a.change_email');
      if (my.session) {
        changeLink.show();
        regLink.hide();
        return logLink.attr("class", "logout").text("Logout");
      } else {
        regLink.show();
        return logLink.attr("class", "login").text("Login");
      }
    };
    logOut = function() {
      expireCookie("zid");
      expireCookie("sgn");
      return window.location.replace(my.currentUrl);
    };
    expireCookie = function(cookie) {
      var domain, expire, options;
      expire = new Date(1);
      domain = "." + window.location.host;
      options = {
        expires: expire,
        path: "/",
        domain: domain
      };
      return $.cookie(cookie, "", options);
    };
    welcomeMessage = function() {
      if ($.cookie("user_type") === "new") {
        triggerModal($("#welcome_message"));
      }
      return expireCookie("user_type");
    };
    init = function() {
      return $(document).ready(function() {
        var type, _i, _len, _ref;
        $('body').bind('new_zid_obtained', function() {
          return my.zid = $.cookie('zid');
        });
        enableLoginRegistration();
        toggleLogIn();
        welcomeMessage();
        _ref = my.popupTypes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          type = _ref[_i];
          bindRegistrationLinks(type);
        }
        return $("#login_links li a.logout").click(logOut);
      });
    };
    return {
      init: init,
      wireupSocialLinks: wireupSocialLinks,
      toggleRegistrationDiv: toggleRegistrationDiv,
      expireCookie: expireCookie,
      session: my.session
    };
  });

}).call(this);
