// Generated by CoffeeScript 1.4.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['jquery', './browserdetect'], function($, browserdetect) {
    var WH;
    WH = (function() {

      function WH() {}

      WH.prototype.cacheBuster = 0;

      WH.prototype.domain = '';

      WH.prototype.firstVisit = null;

      WH.prototype.lastLinkClicked = null;

      WH.prototype.path = '';

      WH.prototype.sessionID = '';

      WH.prototype.userID = '';

      WH.prototype.warehouseTag = null;

      WH.prototype.init = function(opts) {
        if (opts == null) {
          opts = {};
        }
        WH.clickBindSelector = opts.clickBindSelector;
        if (opts.exclusions != null) {
          WH.clickBindSelector = WH.clickBindSelector.replace(/,\s+/g, ":not(" + opts.exclusions + "), ");
        }
        WH.domain = document.location.host;
        WH.exclusionList = opts.exclusionList || [];
        WH.fireCallback = opts.fireCallback;
        WH.parentTagsAllowed = opts.parentTagsAllowed || /div|ul/;
        WH.path = "" + document.location.pathname + document.location.search;
        WH.warehouseURL = opts.warehouseURL;
        WH.setCookies();
        WH.determineDocumentDimensions(document);
        WH.determineWindowDimensions(window);
        WH.determinePlatform();
        return $(function() {
          WH.metaData = WH.getDataFromMetaTags();
          WH.firePageViewTag();
          return WH.bindBodyClicked();
        });
      };

      WH.prototype.bindBodyClicked = function() {
        return $(document).on('click', WH.clickBindSelector, WH.elemClicked);
      };

      WH.prototype.determineParent = function(elem) {
        var el, _i, _len, _ref;
        _ref = elem.parents();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          if (el.tagName.toLowerCase().match(WH.parentTagsAllowed)) {
            return WH.firstClass($(el));
          }
        }
      };

      WH.prototype.determineWindowDimensions = function(obj) {
        return WH.windowDimensions = "" + (obj.width()) + "x" + (obj.height());
      };

      WH.prototype.determineDocumentDimensions = function(obj) {
        var doc;
        doc = $(obj);
        return WH.browserDimensions = "" + (doc.width()) + "x" + (doc.height());
      };

      WH.prototype.determinePlatform = function() {
        return WH.platform = browserdetect.init();
      };

      WH.prototype.elemClicked = function(e, opts) {
        var attr, attrs, domTarget, href, item, jQTarget, realName, subGroup, trackingData, value, _i, _len, _ref;
        if (opts == null) {
          opts = {};
        }
        domTarget = e.target;
        jQTarget = $(e.target);
        attrs = domTarget.attributes;
        item = WH.firstClass(jQTarget) || '';
        subGroup = WH.determineParent(jQTarget) || '';
        value = jQTarget.text() || '';
        trackingData = {
          sg: subGroup,
          item: item,
          value: value,
          type: 'click',
          x: e.clientX,
          y: e.clientY
        };
        for (_i = 0, _len = attrs.length; _i < _len; _i++) {
          attr = attrs[_i];
          if (attr.name.indexOf('data-') === 0 && (_ref = attr.name, __indexOf.call(WH.exclusionList, _ref) < 0)) {
            realName = attr.name.replace('data-', '');
            trackingData[realName] = attr.value;
          }
        }
        href = jQTarget.attr('href');
        if (href && (opts.followHref != null) && opts.followHref) {
          WH.lastLinkClicked = href;
          e.preventDefault();
        }
        WH.fire(trackingData);
        return e.stopPropagation();
      };

      WH.prototype.fire = function(obj) {
        var _ref, _ref1, _ref2, _ref3, _ref4;
        obj.cb = WH.cacheBuster++;
        obj.sess = "" + WH.userID + "." + WH.sessionID;
        obj.fpc = WH.userID;
        obj.site = WH.domain;
        obj.path = WH.path;
        obj.title = $('title').text();
        obj.bs = WH.windowDimensions;
        obj.sr = WH.browserDimensions;
        obj.os = WH.platform.OS;
        obj.browser = WH.platform.browser;
        obj.ver = WH.platform.version;
        obj.ref = document.referrer;
        obj.registration = (_ref = $.cookie('sgn')) != null ? _ref : {
          1: 0
        };
        obj.person_id = $.cookie('zid');
        obj.email_registration = (_ref1 = $.cookie('provider') === 'identity') != null ? _ref1 : {
          1: 0
        };
        obj.facebook_registration = (_ref2 = $.cookie('provider') === 'facebook') != null ? _ref2 : {
          1: 0
        };
        obj.googleplus_registration = (_ref3 = $.cookie('provider') === 'google_oauth2') != null ? _ref3 : {
          1: 0
        };
        obj.twitter_registration = (_ref4 = $.cookie('provider') === 'twitter') != null ? _ref4 : {
          1: 0
        };
        if (WH.firstVisit) {
          obj.firstVisit = WH.firstVisit;
          WH.firstVisit = null;
        }
        if (WH.fireCallback) {
          WH.fireCallback(obj);
        }
        WH.obj2query($.extend(obj, WH.metaData), function(query) {
          var lastLinkRedirect, requestURL;
          requestURL = WH.warehouseURL + query;
          if (requestURL.length > 2048 && navigator.userAgent.indexOf('MSIE') >= 0) {
            requestURL = requestURL.substring(0, 2043) + "&tu=1";
          }
          if (WH.warehouseTag) {
            WH.warehouseTag[0].src = requestURL;
          } else {
            WH.warehouseTag = $('<img/>', {
              id: 'PRMWarehouseTag',
              border: '0',
              width: '1',
              height: '1',
              src: requestURL
            });
          }
          WH.warehouseTag.onload = $('body').trigger('WH_pixel_success_' + obj.type);
          WH.warehouseTag.onerror = $('body').trigger('WH_pixel_error_' + obj.type);
          if (WH.lastLinkClicked) {
            lastLinkRedirect = function(e) {
              if (WH.lastLinkClicked.indexOf('javascript:') === -1) {
                return document.location = WH.lastLinkClicked;
              }
            };
            return WH.warehouseTag.unbind('load').unbind('error').bind('load', lastLinkRedirect).bind('error', lastLinkRedirect);
          }
        });
      };

      WH.prototype.firePageViewTag = function() {
        return WH.fire({
          type: 'pageview'
        });
      };

      WH.prototype.firstClass = function(elem) {
        var klasses;
        if (!(klasses = elem.attr('class'))) {
          return;
        }
        return klasses.split(' ')[0];
      };

      WH.prototype.getMetaAttr = function(name) {
        var content, meta, selector;
        if (name) {
          selector = 'meta[name="' + name + '"]';
          meta = $(selector);
          if (meta[0]) {
            content = meta.attr('content');
            if (content) {
              return content;
            } else {
              return void 0;
            }
          }
        }
      };

      WH.prototype.getDataFromMetaTags = function() {
        var metaTag, metas, name, retObj, _i, _len;
        retObj = {
          cg: ''
        };
        metas = $('meta');
        for (_i = 0, _len = metas.length; _i < _len; _i++) {
          metaTag = metas[_i];
          metaTag = $(metaTag);
          if (metaTag.attr('name') && metaTag.attr('name').indexOf('WH.') === 0) {
            name = metaTag.attr('name').replace('WH.', '');
            retObj[name] = metaTag.attr('content');
          }
        }
        return retObj;
      };

      WH.prototype.obj2query = function(obj, cb) {
        var key, rv, val;
        rv = [];
        for (key in obj) {
          if (obj.hasOwnProperty(key) && ((val = obj[key]) != null)) {
            rv.push("&" + key + "=" + (encodeURIComponent(val)));
          }
        }
        cb(rv.join('').replace(/^&/, '?'));
      };

      WH.prototype.setCookies = function() {
        var sessionID, timestamp, userID;
        userID = $.cookie('WHUserID');
        sessionID = $.cookie('WHSessionID');
        timestamp = new Date().getTime();
        if (!userID) {
          userID = timestamp;
          $.cookie('WHUserID', userID, {
            expires: 3650,
            path: '/'
          });
        }
        if (!sessionID) {
          sessionID = timestamp;
          WH.firstVisit = timestamp;
          $.cookie('WHSessionID', sessionID, {
            path: '/'
          });
        }
        WH.sessionID = sessionID;
        return WH.userID = userID;
      };

      return WH;

    })();
    return WH;
  });

}).call(this);
