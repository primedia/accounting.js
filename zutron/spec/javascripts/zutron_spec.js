// Generated by CoffeeScript 1.6.3
(function() {
  describe("Zutron", function() {
    var JJQuery, zutron;
    zutron = void 0;
    JJQuery = void 0;
    beforeEach(function() {
      var ready;
      ready = false;
      jasmine.getGlobal().zutron_host = "http://test.com";
      require(['../../zutron', 'jasmine-jquery'], function(_zutron, $) {
        zutron = _zutron;
        ready = true;
        return JJQuery = $;
      });
      return waitsFor(function() {
        return ready;
      });
    });
    describe('#displayErrorMessage', function() {
      it("should pickup configuration object", function() {
        var zutronConfig;
        setFixtures(sandbox({
          id: 'test_error_div'
        }));
        zutronConfig = {
          host: 'ag',
          error_div: '#test_error_div'
        };
        zutron.init(zutronConfig);
        zutron.displayErrorMessage('test error message');
        return expect($('#test_error_div').text()).toEqual('test error message');
      });
      it("should pickup default value for backward compatibility", function() {
        var zutronConfig;
        setFixtures(sandbox({
          id: 'snapbar_error'
        }));
        zutronConfig = {
          host: 'ag'
        };
        zutron.init(zutronConfig);
        zutron.displayErrorMessage('test error message');
        return expect($('#snapbar_error').text()).toEqual('test error message');
      });
      return it("should handle a missing config object", function() {
        zutron.init();
        return expect(zutron).toBeDefined();
      });
    });
    return describe("functionality", function() {
      it("is defined", function() {
        return expect(zutron).toBeDefined();
      });
      return it("should get data for zid", function() {
        spyOn($, "ajax").andCallFake(function(req) {
          var d;
          d = $.Deferred();
          d.resolve({
            zid: {
              key: "asdf",
              listings: []
            }
          });
          return d.promise();
        });
        zutron.getSavedListings();
        return $.fn.on("zutron/savedListings", function(data) {
          return expect(data).toBeDefined();
        });
      });
    });
  });

}).call(this);
