// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'flight/lib/component', 'lib/fusiontip/fusiontip', 'lib/accounting/accounting', 'map/utils/mobile_detection'], function(_, defineComponent, fusionTip, accounting, mobileDetection) {
    var ToolTip, neighborhoodsOverlay;
    ToolTip = (function(_super) {
      __extends(ToolTip, _super);

      function ToolTip(map, template) {
        this.map = map;
        this.template = template;
        this.setMap(this.map);
      }

      ToolTip.prototype.container = $("<div/>", {
        "class": "hood-info-window"
      });

      ToolTip.prototype.position = null;

      ToolTip.prototype.count = null;

      ToolTip.prototype.destroy = function() {
        return this.setMap(null);
      };

      ToolTip.prototype.onAdd = function() {
        return this.$el.appendTo(this.getPanes().overlayLayer);
      };

      ToolTip.prototype.onRemove = function() {
        return this.$el.remove();
      };

      ToolTip.prototype.draw = function() {
        var overlayProjection, px;
        overlayProjection = this.getProjection();
        px = overlayProjection.fromLatLngToDivPixel(this.position);
        return this.$el.css({
          left: px.x,
          top: px.y
        });
      };

      ToolTip.prototype.setContent = function(data) {
        console.log(data);
        return this.container.html(_.template(this.template, data));
      };

      return ToolTip;

    })(google.maps.OverlayView);
    neighborhoodsOverlay = function() {
      this.defaultAttrs({
        enableOnboardCalls: false,
        enableMouseover: false,
        tableId: void 0,
        apiKey: void 0,
        hoodLayer: void 0,
        gMap: void 0,
        toggleLink: void 0,
        toggleControl: void 0,
        data: void 0,
        infoTemplate: void 0,
        tipStyle: '',
        mouseTipDelay: 200,
        suppressMapTips: false,
        minimalZommLevel: 12,
        polygons: [],
        wait: 500,
        polyOptions: {
          clicked: {
            strokeColor: "#000",
            strokeOpacity: .5,
            strokeWeight: 1,
            fillColor: "#000",
            fillOpacity: .2
          },
          mouseover: {
            strokeColor: "#000",
            strokeOpacity: .5,
            strokeWeight: 1,
            fillColor: "#000",
            fillOpacity: .2
          },
          mouseout: {
            strokeWeight: 0,
            fillOpacity: 0
          }
        },
        polygonOptions: {
          fillColor: "BC8F8F",
          fillOpacity: 0.1,
          strokeColor: "4D4D4D",
          strokeOpacity: 0.8,
          strokeWeight: 1
        },
        polygonOptionsCurrent: {
          fillOpacity: 0.5,
          strokeColor: '4D4D4D',
          strokeOpacity: 0.7,
          strokeWeight: 2
        },
        infoWindowData: {
          state: void 0,
          hood: void 0,
          population: void 0,
          growth: void 0,
          density: void 0,
          males: void 0,
          females: void 0,
          median_income: void 0,
          average_income: void 0
        }
      });
      this.infoWindow = new google.maps.InfoWindow();
      this.hoodQuery = function(data) {
        var where;
        where = "WHERE LATITUDE >= " + data.lat1 + " AND LATITUDE <= " + data.lat2 + " AND LONGITUDE >= " + data.lng1 + " AND LONGITUDE <= " + data.lng2;
        return "SELECT geometry, HOOD_NAME, STATENAME, MARKET, LATITUDE, LONGITUDE FROM " + this.attr.tableId + " " + where;
      };
      this.addHoodsLayer = function(ev, data) {
        if (!data || !data.gMap || data.gMap.getZoom() < this.attr.minimalZommLevel) {
          return;
        }
        this.attr.gMap = data.gMap;
        this.attr.data = data;
        if (!this.toolTip) {
          this.toolTip = new ToolTip(this.attr.gMap, this.attr.infoTemplate);
        }
        return this.getKmlData(data);
      };
      this.setupMouseOver = function(event, data) {
        if (!this.isMobile() && this.attr.enableMouseover) {
          return this.buildInfoWindow(event, data);
        }
      };
      this.getKmlData = function(data) {
        var url,
          _this = this;
        url = ["https://www.googleapis.com/fusiontables/v1/query?sql="];
        url.push(encodeURIComponent(this.hoodQuery(data)));
        url.push("&key=" + this.attr.apiKey);
        return $.ajax({
          url: url.join(""),
          dataType: "jsonp",
          success: function(data) {
            return _this.buildPolygons(data);
          }
        });
      };
      this.clearPolygons = function() {
        var x, _i, _len, _ref;
        if (!this.attr.polygons.length) {
          return;
        }
        _ref = this.attr.polygons;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          if (x) {
            x.setMap(null);
          }
        }
        this.attr.polygons = [];
      };
      this.buildPolygons = function(data) {
        var hoodData, polygonData, row, rows, _i, _len, _results;
        rows = data.rows;
        this.clearPolygons();
        _results = [];
        for (_i = 0, _len = rows.length; _i < _len; _i++) {
          row = rows[_i];
          if (!rows[0]) {
            continue;
          }
          polygonData = this.buildPaths(row);
          hoodData = this.buildHoodData(row);
          _results.push(this.wireupPolygon(polygonData, hoodData));
        }
        return _results;
      };
      this.wireupPolygon = function(polygonData, hoodData) {
        var hoodLayer, initialOptions, isCurrentHood, mouseOutOptions, mouseOverOptions;
        mouseOverOptions = this.attr.polyOptions.mouseover;
        mouseOutOptions = this.attr.polyOptions.mouseout;
        isCurrentHood = this.attr.data.hood === hoodData.hood;
        initialOptions = isCurrentHood ? mouseOverOptions : mouseOutOptions;
        hoodLayer = new google.maps.Polygon(_.extend({
          paths: polygonData
        }, initialOptions));
        google.maps.event.addListener(hoodLayer, "mouseover", function(e) {
          this.setOptions(mouseOverOptions);
          return $(document).trigger('hoodMouseOver', {
            data: hoodData
          });
        });
        if (!isCurrentHood) {
          google.maps.event.addListener(hoodLayer, "mouseout", function() {
            this.setOptions(mouseOutOptions);
            return $(document).trigger('closeInfoWindow');
          });
        }
        hoodLayer.setMap(this.attr.gMap);
        this.attr.polygons.push(hoodLayer);
      };
      this.buildPaths = function(row) {
        var coordinates, geometry;
        coordinates = [];
        if (geometry = row[0].geometry) {
          if (geometry.type === 'Polygon') {
            coordinates = this.makePathsCoordinates(geometry.coordinates[0]);
          }
        }
        return coordinates;
      };
      this.isValidPoint = function(arr) {
        return arr.length === 2 && _.all(arr, _.isNumber);
      };
      this.makePathsCoordinates = function(coordinates) {
        if (this.isValidPoint(coordinates)) {
          return new google.maps.LatLng(coordinates[1], coordinates[0]);
        } else {
          return _.map(coordinates, this.makePathsCoordinates, this);
        }
      };
      this.buildHoodData = function(row) {
        if (typeof row[0] === 'object') {
          return _.object(['hood', 'state', 'city', 'lat', 'lng'], row.slice(1));
        } else {
          return {};
        }
      };
      this.buildToolTip = function(ev, data) {
        return console.log("Tooltip Position", data.position);
      };
      this.buildInfoWindow = function(event, polygonData) {
        var _this = this;
        if (!polygonData) {
          return;
        }
        return setTimeout(function() {
          var infoData, location;
          _this.trigger(document, 'uiNHoodInfoWindowDataRequest');
          infoData = _this.buildOnboardData(polygonData.data);
          location = new google.maps.LatLng(polygonData.data.lat, polygonData.data.lng);
          _this.infoWindow.setContent(_.template(_this.attr.infoTemplate, infoData));
          _this.infoWindow.setPosition(location);
          _this.infoWindow.open(_this.attr.gMap);
          return _this.toolTip.setContent(infoData);
        }, this.attr.wait);
      };
      this.buildOnboardData = function(data) {
        var demographic, key, onboardData, value, _ref;
        if (!this.attr.enableOnboardCalls) {
          return;
        }
        onboardData = JSON.parse(this.getOnboardData(data).responseText);
        data = _.extend(this.attr.infoWindowData, data);
        if (!_.isEmpty(onboardData)) {
          demographic = onboardData.demographic;
          _ref = this.attr.infoWindowData;
          for (key in _ref) {
            value = _ref[key];
            if (demographic[key]) {
              data[key] = this.formatValue(key, demographic[key]);
            }
          }
        }
        return data;
      };
      this.formatValue = function(key, value) {
        switch (key) {
          case 'median_income':
          case 'average_income':
            return accounting.formatMoney(value);
          case 'population':
            return accounting.formatNumber(value);
          default:
            return value;
        }
      };
      this.getOnboardData = function(data) {
        var query, xhr;
        if (_.isEmpty(data)) {
          return {};
        }
        query = [];
        query.push("state=" + (this.toDashes(data.state)));
        query.push("city=" + (this.toDashes(data.city)));
        query.push("neighborhood=" + (this.toDashes(data.hood)));
        return xhr = $.ajax({
          url: "/meta/community?rectype=NH&" + (query.join('&')),
          async: false
        }).done(function(data) {
          return data;
        }).fail(function(data) {
          return {};
        });
      };
      this.hideInfoWindow = function() {
        if (this.infoWindow) {
          return this.infoWindow.close();
        }
      };
      this.toDashes = function(value) {
        if (value == null) {
          return '';
        }
        return value.replace(' ', '-');
      };
      this.toSpaces = function(value) {
        if (value == null) {
          return '';
        }
        return value.replace('-', ' ');
      };
      return this.after('initialize', function() {
        this.on(document, 'uiNeighborhoodDataRequest', this.addHoodsLayer);
        this.on(document, 'hoodMouseOver', this.setupMouseOver);
        this.on(document, 'showToolTip', this.buildToolTip);
        this.on(document, 'closeInfoWindow', this.hideInfoWindow);
      });
    };
    return defineComponent(neighborhoodsOverlay, mobileDetection);
  });

}).call(this);
